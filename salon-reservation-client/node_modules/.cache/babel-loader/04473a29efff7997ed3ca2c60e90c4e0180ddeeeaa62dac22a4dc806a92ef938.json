{"ast":null,"code":"var _jsxFileName = \"/Users/minam.cho/workspaces/study/sister-hair-salon-reservation/salon-reservation-client/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  isAuthenticated: false,\n  admin: null,\n  login: async () => ({\n    success: false\n  }),\n  logout: () => {},\n  checkAdmin: async () => false,\n  registerAdmin: async () => ({\n    success: false\n  }),\n  loading: true\n});\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [admin, setAdmin] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Initialize auth state\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // Verify token with backend\n          const response = await axios.get('/api/auth/verify', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          if (response.data.valid) {\n            setIsAuthenticated(true);\n            setAdmin(response.data.admin);\n            // Set default authorization header\n            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          } else {\n            // Invalid token, remove it\n            localStorage.removeItem('token');\n            delete axios.defaults.headers.common['Authorization'];\n          }\n        } catch (error) {\n          // Token verification failed\n          localStorage.removeItem('token');\n          delete axios.defaults.headers.common['Authorization'];\n        }\n      }\n      setLoading(false);\n    };\n    initAuth();\n  }, []);\n  const login = async (username, password) => {\n    try {\n      const response = await axios.post('/api/auth/login', {\n        username,\n        password\n      });\n      const {\n        token,\n        admin: adminData\n      } = response.data;\n\n      // Store token\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n      setAdmin(adminData);\n\n      // Set default authorization header\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || '로그인에 실패했습니다.';\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n    setAdmin(null);\n    delete axios.defaults.headers.common['Authorization'];\n  };\n  const checkAdmin = async () => {\n    try {\n      const response = await axios.get('/api/auth/check-admin');\n      return response.data.hasAdmin;\n    } catch (error) {\n      console.error('Error checking admin:', error);\n      return false;\n    }\n  };\n  const registerAdmin = async (username, password) => {\n    try {\n      await axios.post('/api/auth/register', {\n        username,\n        password\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || '관리자 등록에 실패했습니다.';\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const contextValue = {\n    isAuthenticated,\n    admin,\n    login,\n    logout,\n    checkAdmin,\n    registerAdmin,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"FIui8k98dtYv6gQ3tSMBcjASx7I=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","isAuthenticated","admin","login","success","logout","checkAdmin","registerAdmin","loading","useAuth","_s","context","Error","AuthProvider","children","_s2","setIsAuthenticated","setAdmin","setLoading","initAuth","token","localStorage","getItem","response","get","headers","Authorization","data","valid","defaults","common","removeItem","error","username","password","post","adminData","setItem","_error$response","_error$response$data","errorMessage","hasAdmin","console","_error$response2","_error$response2$data","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/minam.cho/workspaces/study/sister-hair-salon-reservation/salon-reservation-client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport axios from 'axios';\n\ninterface Admin {\n  id: number;\n  username: string;\n}\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  admin: Admin | null;\n  login: (username: string, password: string) => Promise<{ success: boolean; error?: string }>;\n  logout: () => void;\n  checkAdmin: () => Promise<boolean>;\n  registerAdmin: (username: string, password: string) => Promise<{ success: boolean; error?: string }>;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  isAuthenticated: false,\n  admin: null,\n  login: async () => ({ success: false }),\n  logout: () => {},\n  checkAdmin: async () => false,\n  registerAdmin: async () => ({ success: false }),\n  loading: true,\n});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [admin, setAdmin] = useState<Admin | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Initialize auth state\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // Verify token with backend\n          const response = await axios.get('/api/auth/verify', {\n            headers: { Authorization: `Bearer ${token}` }\n          });\n          \n          if (response.data.valid) {\n            setIsAuthenticated(true);\n            setAdmin(response.data.admin);\n            // Set default authorization header\n            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          } else {\n            // Invalid token, remove it\n            localStorage.removeItem('token');\n            delete axios.defaults.headers.common['Authorization'];\n          }\n        } catch (error) {\n          // Token verification failed\n          localStorage.removeItem('token');\n          delete axios.defaults.headers.common['Authorization'];\n        }\n      }\n      setLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (username: string, password: string): Promise<{ success: boolean; error?: string }> => {\n    try {\n      const response = await axios.post('/api/auth/login', { username, password });\n      const { token, admin: adminData } = response.data;\n      \n      // Store token\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n      setAdmin(adminData);\n      \n      // Set default authorization header\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      return { success: true };\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.error || '로그인에 실패했습니다.';\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n    setAdmin(null);\n    delete axios.defaults.headers.common['Authorization'];\n  };\n\n  const checkAdmin = async (): Promise<boolean> => {\n    try {\n      const response = await axios.get('/api/auth/check-admin');\n      return response.data.hasAdmin;\n    } catch (error) {\n      console.error('Error checking admin:', error);\n      return false;\n    }\n  };\n\n  const registerAdmin = async (username: string, password: string): Promise<{ success: boolean; error?: string }> => {\n    try {\n      await axios.post('/api/auth/register', { username, password });\n      return { success: true };\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.error || '관리자 등록에 실패했습니다.';\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  const contextValue: AuthContextType = {\n    isAuthenticated,\n    admin,\n    login,\n    logout,\n    checkAdmin,\n    registerAdmin,\n    loading,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}